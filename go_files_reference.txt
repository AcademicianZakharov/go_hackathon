package main

import (
	"fmt"
	//"errors"
	"strings"
)

func main() {
	var intarr [3]int32 = [...]int32{1, 2, 3}
	fmt.Println(intarr[1:3])
	fmt.Println(len(intarr))

	var intslice []int32 = []int32{4, 5, 6}
	fmt.Println(intslice)
	intslice = append(intslice, 7, intarr[0])
	fmt.Println(intslice)

	//using a function from another file
	printSomething("\n---------gabriels test section--------------")
	//maps and loops
	// var mymap0 map[string]int = make(map[string]int)
	// fmt.Println(mymap0)
	// var mymap = map[string]int{"sam": 23, "sarah": 45}
	// fmt.Println(mymap)
	// var age, ok = mymap["sam"]
	// fmt.Println(age, ok)
	// //delete(mymap, "sarah")
	//loop maps
	// for name, age := range mymap {
	// 	//fmt.Printf("Name %v, age %v\n", name, mymap[name])
	// 	fmt.Printf("Name %v, age %v\n", name, age)
	// }
	//loop
	// for i := 0; i < 10; i++ {
	// 	fmt.Println(i)
	// }
	//runes and stringbuilders
	var mystr = []rune("dziesięć")
	var indexed = mystr[0]
	fmt.Printf("%v, %v, %T\n", indexed, mystr, indexed)

	var strSlice = []string{"t", "e", "x", "T"}
	var strBuilder strings.Builder

	for i := range strSlice {
		strBuilder.WriteString(strSlice[i])
	}
	var catStr = strBuilder.String()
	fmt.Printf("%v\n", catStr)

	//structs
	engineFunc()
	var myEngine gasEngine = gasEngine{25, 15}
	fmt.Printf("miles left %v\n", myEngine.milesLeft())

}


package main

import (
	"fmt"
)

func printSomething(n string) {
	fmt.Println("printing function:", n)
}

package main

import (
	"fmt"
)

type gasEngine struct {
	mpg     uint8
	gallons uint8
}

// methods
func (e gasEngine) milesLeft() uint8 {
	return e.gallons * e.mpg
}

func engineFunc() {
	var myEngine gasEngine = gasEngine{25, 15}
	fmt.Printf("struct: myEngine miles per gallon and gallons: %v %v\n", myEngine.mpg, myEngine.gallons)

}
